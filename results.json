{
  "status": "finished",
  "startedTestsAt": "2023-03-15T05:12:59.586Z",
  "endedTestsAt": "2023-03-15T05:15:25.128Z",
  "totalDuration": 91339,
  "totalSuites": 34,
  "totalTests": 124,
  "totalPassed": 124,
  "totalPending": 0,
  "totalFailed": 0,
  "totalSkipped": 0,
  "runs": [
    {
      "stats": {
        "suites": 2,
        "tests": 6,
        "passes": 6,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 4170,
        "startedAt": "2023-03-15T05:12:59.586Z",
        "endedAt": "2023-03-15T05:13:03.756Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 2,
        "tests": 6,
        "passes": 6,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:12:59.577Z",
        "end": "2023-03-15T05:13:03.754Z",
        "duration": 4177
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    // Cypress starts out with a blank slate for each test\n    // so we must tell it to visit our website with the `cy.visit()` command.\n    // Since we want to visit the same URL at the start of all our tests,\n    // we include it in our beforeEach function so that it runs before each test\n    cy.visit('https://example.cypress.io/todo');\n  }"
        },
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n      // We'll take the command we used above to check off an element\n      // Since we want to perform multiple tests that start with checking\n      // one element, we put it in the beforeEach hook\n      // so that it runs at the start of every test.\n      cy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n    }"
        }
      ],
      "tests": [
        {
          "title": [
            "example to-do app",
            "displays two todo items by default"
          ],
          "state": "passed",
          "body": "() => {\n    // We use the `cy.get()` command to get all elements that match the selector.\n    // Then, we use `should` to assert that there are two matched items,\n    // which are the two default items.\n    cy.get('.todo-list li').should('have.length', 2);\n\n    // We can go even further and check that the default todos each contain\n    // the correct text. We use the `first` and `last` functions\n    // to get just the first and last matched elements individually,\n    // and then perform an assertion with `should`.\n    cy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\n    cy.get('.todo-list li').last().should('have.text', 'Walk the dog');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 4282,
              "duration": 829,
              "startedAt": "2023-03-15T05:13:01.232Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "example to-do app",
            "can add new todo items"
          ],
          "state": "passed",
          "body": "() => {\n    // We'll store our item text in a variable so we can reuse it\n    const newItem = 'Feed the cat';\n\n    // Let's get the input element and use the `type` command to\n    // input our new list item. After typing the content of our item,\n    // we need to type the enter key as well in order to submit the input.\n    // This input has a data-test attribute so we'll use that to select the\n    // element in accordance with best practices:\n    // https://on.cypress.io/selecting-elements\n    cy.get('[data-test=new-todo]').type(`${newItem}{enter}`);\n\n    // Now that we've typed our new item, let's check that it actually was added to the list.\n    // Since it's the newest item, it should exist as the last element in the list.\n    // In addition, with the two default items, we should have a total of 3 elements in the list.\n    // Since assertions yield the element that was asserted on,\n    // we can chain both of these assertions together into a single statement.\n    cy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 5113,
              "duration": 456,
              "startedAt": "2023-03-15T05:13:02.063Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "example to-do app",
            "can check off an item as completed"
          ],
          "state": "passed",
          "body": "() => {\n    // In addition to using the `get` command to get an element by selector,\n    // we can also use the `contains` command to get an element by its contents.\n    // However, this will yield the <label>, which is lowest-level element that contains the text.\n    // In order to check the item, we'll find the <input> element for this <label>\n    // by traversing up the dom to the parent element. From there, we can `find`\n    // the child checkbox <input> element and use the `check` command to check it.\n    cy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n\n    // Now that we've checked the button, we can go ahead and make sure\n    // that the list element is now marked as completed.\n    // Again we'll use `contains` to find the <label> element and then use the `parents` command\n    // to traverse multiple levels up the dom until we find the corresponding <li> element.\n    // Once we get that element, we can assert that it has the completed class.\n    cy.contains('Pay electric bill').parents('li').should('have.class', 'completed');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 5571,
              "duration": 243,
              "startedAt": "2023-03-15T05:13:02.521Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "example to-do app",
            "with a checked task",
            "can filter for uncompleted tasks"
          ],
          "state": "passed",
          "body": "() => {\n      // We'll click on the \"active\" button in order to\n      // display only incomplete items\n      cy.contains('Active').click();\n\n      // After filtering, we can assert that there is only the one\n      // incomplete item in the list.\n      cy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog');\n\n      // For good measure, let's also assert that the task we checked off\n      // does not exist on the page.\n      cy.contains('Pay electric bill').should('not.exist');\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 5815,
              "duration": 322,
              "startedAt": "2023-03-15T05:13:02.765Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "example to-do app",
            "with a checked task",
            "can filter for completed tasks"
          ],
          "state": "passed",
          "body": "() => {\n      // We can perform similar steps as the test above to ensure\n      // that only completed tasks are shown\n      cy.contains('Completed').click();\n      cy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\n      cy.contains('Walk the dog').should('not.exist');\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 6138,
              "duration": 334,
              "startedAt": "2023-03-15T05:13:03.088Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "example to-do app",
            "with a checked task",
            "can delete all completed tasks"
          ],
          "state": "passed",
          "body": "() => {\n      // First, let's click the \"Clear completed\" button\n      // `contains` is actually serving two purposes here.\n      // First, it's ensuring that the button exists within the dom.\n      // This button only appears when at least one task is checked\n      // so this command is implicitly verifying that it does exist.\n      // Second, it selects the button so we can click it.\n      cy.contains('Clear completed').click();\n\n      // Then we can make sure that there is only one element\n      // in the list and our element does not exist\n      cy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill');\n\n      // Finally, make sure that the clear button no longer exists.\n      cy.contains('Clear completed').should('not.exist');\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 6473,
              "duration": 332,
              "startedAt": "2023-03-15T05:13:03.423Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\1-getting-started\\todo.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "todo.cy.js",
        "fileName": "todo",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "1-getting-started/todo.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/1-getting-started/todo.cy.js",
        "relative": "cypress\\e2e\\1-getting-started\\todo.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/1-getting-started/todo.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 14,
        "passes": 14,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 15847,
        "startedAt": "2023-03-15T05:13:06.598Z",
        "endedAt": "2023-03-15T05:13:22.445Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 14,
        "passes": 14,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:13:06.588Z",
        "end": "2023-03-15T05:13:22.437Z",
        "duration": 15849
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/actions');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Actions",
            ".type() - type into a DOM element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/type\n    cy.get('.action-email').type('fake@email.com').should('have.value', 'fake@email.com')\n\n    // .type() with special character sequences\n    .type('{leftarrow}{rightarrow}{uparrow}{downarrow}').type('{del}{selectall}{backspace}')\n\n    // .type() with key modifiers\n    .type('{alt}{option}') //these are equivalent\n    .type('{ctrl}{control}') //these are equivalent\n    .type('{meta}{command}{cmd}') //these are equivalent\n    .type('{shift}')\n\n    // Delay each keypress by 0.1 sec\n    .type('slow.typing@email.com', {\n      delay: 100\n    }).should('have.value', 'slow.typing@email.com');\n    cy.get('.action-disabled')\n    // Ignore error checking prior to type\n    // like whether the input is visible or disabled\n    .type('disabled error checking', {\n      force: true\n    }).should('have.value', 'disabled error checking');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2193,
              "duration": 4094,
              "startedAt": "2023-03-15T05:13:07.751Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Actions",
            ".focus() - focus on a DOM element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/focus\n    cy.get('.action-focus').focus().should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 6300,
              "duration": 194,
              "startedAt": "2023-03-15T05:13:11.858Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Actions",
            ".blur() - blur off a DOM element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/blur\n    cy.get('.action-blur').type('About to blur').blur().should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 6495,
              "duration": 499,
              "startedAt": "2023-03-15T05:13:12.053Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Actions",
            ".clear() - clears an input or textarea element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/clear\n    cy.get('.action-clear').type('Clear this text').should('have.value', 'Clear this text').clear().should('have.value', '');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 6996,
              "duration": 593,
              "startedAt": "2023-03-15T05:13:12.554Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Actions",
            ".submit() - submit a form"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/submit\n    cy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\n    cy.get('.action-form').submit().next().should('contain', 'Your form has been submitted!');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 7591,
              "duration": 505,
              "startedAt": "2023-03-15T05:13:13.149Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Actions",
            ".click() - click on a DOM element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/click\n    cy.get('.action-btn').click();\n\n    // You can click on 9 specific positions of an element:\n    //  -----------------------------------\n    // | topLeft        top       topRight |\n    // |                                   |\n    // |                                   |\n    // |                                   |\n    // | left          center        right |\n    // |                                   |\n    // |                                   |\n    // |                                   |\n    // | bottomLeft   bottom   bottomRight |\n    //  -----------------------------------\n\n    // clicking in the center of the element is the default\n    cy.get('#action-canvas').click();\n    cy.get('#action-canvas').click('topLeft');\n    cy.get('#action-canvas').click('top');\n    cy.get('#action-canvas').click('topRight');\n    cy.get('#action-canvas').click('left');\n    cy.get('#action-canvas').click('right');\n    cy.get('#action-canvas').click('bottomLeft');\n    cy.get('#action-canvas').click('bottom');\n    cy.get('#action-canvas').click('bottomRight');\n\n    // .click() accepts an x and y coordinate\n    // that controls where the click occurs :)\n\n    cy.get('#action-canvas').click(80, 75) // click 80px on x coord and 75px on y coord\n    .click(170, 75).click(80, 165).click(100, 185).click(125, 190).click(150, 185).click(170, 165);\n\n    // click multiple elements by passing multiple: true\n    cy.get('.action-labels>.label').click({\n      multiple: true\n    });\n\n    // Ignore error checking prior to clicking\n    cy.get('.action-opacity>.btn').click({\n      force: true\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 8097,
              "duration": 2510,
              "startedAt": "2023-03-15T05:13:13.655Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Actions",
            ".dblclick() - double click on a DOM element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/dblclick\n\n    // Our app has a listener on 'dblclick' event in our 'scripts.js'\n    // that hides the div and shows an input on double click\n    cy.get('.action-div').dblclick().should('not.be.visible');\n    cy.get('.action-input-hidden').should('be.visible');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 10608,
              "duration": 277,
              "startedAt": "2023-03-15T05:13:16.166Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Actions",
            ".rightclick() - right click on a DOM element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/rightclick\n\n    // Our app has a listener on 'contextmenu' event in our 'scripts.js'\n    // that hides the div and shows an input on right click\n    cy.get('.rightclick-action-div').rightclick().should('not.be.visible');\n    cy.get('.rightclick-action-input-hidden').should('be.visible');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 10886,
              "duration": 264,
              "startedAt": "2023-03-15T05:13:16.444Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Actions",
            ".check() - check a checkbox or radio element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/check\n\n    // By default, .check() will check all\n    // matching checkbox or radio elements in succession, one after another\n    cy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check().should('be.checked');\n    cy.get('.action-radios [type=\"radio\"]').not('[disabled]').check().should('be.checked');\n\n    // .check() accepts a value argument\n    cy.get('.action-radios [type=\"radio\"]').check('radio1').should('be.checked');\n\n    // .check() accepts an array of values\n    cy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']).should('be.checked');\n\n    // Ignore error checking prior to checking\n    cy.get('.action-checkboxes [disabled]').check({\n      force: true\n    }).should('be.checked');\n    cy.get('.action-radios [type=\"radio\"]').check('radio3', {\n      force: true\n    }).should('be.checked');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 11151,
              "duration": 1049,
              "startedAt": "2023-03-15T05:13:16.709Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Actions",
            ".uncheck() - uncheck a checkbox element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/uncheck\n\n    // By default, .uncheck() will uncheck all matching\n    // checkbox elements in succession, one after another\n    cy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck().should('not.be.checked');\n\n    // .uncheck() accepts a value argument\n    cy.get('.action-check [type=\"checkbox\"]').check('checkbox1').uncheck('checkbox1').should('not.be.checked');\n\n    // .uncheck() accepts an array of values\n    cy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']).uncheck(['checkbox1', 'checkbox3']).should('not.be.checked');\n\n    // Ignore error checking prior to unchecking\n    cy.get('.action-check [disabled]').uncheck({\n      force: true\n    }).should('not.be.checked');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 12201,
              "duration": 1047,
              "startedAt": "2023-03-15T05:13:17.759Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Actions",
            ".select() - select an option in a <select> element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/select\n\n    // at first, no option should be selected\n    cy.get('.action-select').should('have.value', '--Select a fruit--');\n\n    // Select option(s) with matching text content\n    cy.get('.action-select').select('apples');\n    // confirm the apples were selected\n    // note that each value starts with \"fr-\" in our HTML\n    cy.get('.action-select').should('have.value', 'fr-apples');\n    cy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas'])\n    // when getting multiple values, invoke \"val\" method first\n    .invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n\n    // Select option(s) with matching value\n    cy.get('.action-select').select('fr-bananas')\n    // can attach an assertion right away to the element\n    .should('have.value', 'fr-bananas');\n    cy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']).invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n\n    // assert the selected values include oranges\n    cy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 13249,
              "duration": 994,
              "startedAt": "2023-03-15T05:13:18.807Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Actions",
            ".scrollIntoView() - scroll an element into view"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/scrollintoview\n\n    // normally all of these buttons are hidden,\n    // because they're not within\n    // the viewable area of their parent\n    // (we need to scroll to see them)\n    cy.get('#scroll-horizontal button').should('not.be.visible');\n\n    // scroll the button into view, as if the user had scrolled\n    cy.get('#scroll-horizontal button').scrollIntoView().should('be.visible');\n    cy.get('#scroll-vertical button').should('not.be.visible');\n\n    // Cypress handles the scroll direction needed\n    cy.get('#scroll-vertical button').scrollIntoView().should('be.visible');\n    cy.get('#scroll-both button').should('not.be.visible');\n\n    // Cypress knows to scroll to the right and down\n    cy.get('#scroll-both button').scrollIntoView().should('be.visible');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 14243,
              "duration": 195,
              "startedAt": "2023-03-15T05:13:19.801Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Actions",
            ".trigger() - trigger an event on a DOM element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/trigger\n\n    // To interact with a range input (slider)\n    // we need to set its value & trigger the\n    // event to signal it changed\n\n    // Here, we invoke jQuery's val() method to set\n    // the value and trigger the 'change' event\n    cy.get('.trigger-input-range').invoke('val', 25).trigger('change').get('input[type=range]').siblings('p').should('have.text', '25');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 14440,
              "duration": 289,
              "startedAt": "2023-03-15T05:13:19.998Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Actions",
            "cy.scrollTo() - scroll the window or element to a position"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/scrollto\n\n    // You can scroll to 9 specific positions of an element:\n    //  -----------------------------------\n    // | topLeft        top       topRight |\n    // |                                   |\n    // |                                   |\n    // |                                   |\n    // | left          center        right |\n    // |                                   |\n    // |                                   |\n    // |                                   |\n    // | bottomLeft   bottom   bottomRight |\n    //  -----------------------------------\n\n    // if you chain .scrollTo() off of cy, we will\n    // scroll the entire window\n    cy.scrollTo('bottom');\n    cy.get('#scrollable-horizontal').scrollTo('right');\n\n    // or you can scroll to a specific coordinate:\n    // (x axis, y axis) in pixels\n    cy.get('#scrollable-vertical').scrollTo(250, 250);\n\n    // or you can scroll to a specific percentage\n    // of the (width, height) of the element\n    cy.get('#scrollable-both').scrollTo('75%', '25%');\n\n    // control the easing of the scroll (default is 'swing')\n    cy.get('#scrollable-vertical').scrollTo('center', {\n      easing: 'linear'\n    });\n\n    // control the duration of the scroll (in ms)\n    cy.get('#scrollable-both').scrollTo('center', {\n      duration: 2000\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 14730,
              "duration": 2155,
              "startedAt": "2023-03-15T05:13:20.288Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\actions.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "actions.cy.js",
        "fileName": "actions",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/actions.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/actions.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/actions.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 2,
        "passes": 2,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 3529,
        "startedAt": "2023-03-15T05:13:25.951Z",
        "endedAt": "2023-03-15T05:13:29.480Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 2,
        "passes": 2,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:13:25.941Z",
        "end": "2023-03-15T05:13:29.477Z",
        "duration": 3536
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/aliasing');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Aliasing",
            ".as() - alias a DOM element for later use"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/as\n\n    // Alias a DOM element for use later\n    // We don't have to traverse to the element\n    // later in our code, we reference it with @\n\n    cy.get('.as-table').find('tbody>tr').first().find('td').first().find('button').as('firstBtn');\n\n    // when we reference the alias, we place an\n    // @ in front of its name\n    cy.get('@firstBtn').click();\n    cy.get('@firstBtn').should('have.class', 'btn-success').and('contain', 'Changed');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2497,
              "duration": 586,
              "startedAt": "2023-03-15T05:13:27.397Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Aliasing",
            ".as() - alias a route for later use"
          ],
          "state": "passed",
          "body": "() => {\n    // Alias the route to wait for its response\n    cy.intercept('GET', '**/comments/*').as('getComment');\n\n    // we have code that gets a comment when\n    // the button is clicked in scripts.js\n    cy.get('.network-btn').click();\n\n    // https://on.cypress.io/wait\n    cy.wait('@getComment').its('response.statusCode').should('eq', 200);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3085,
              "duration": 1493,
              "startedAt": "2023-03-15T05:13:27.985Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\aliasing.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "aliasing.cy.js",
        "fileName": "aliasing",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/aliasing.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/aliasing.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/aliasing.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 3,
        "tests": 9,
        "passes": 9,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 4313,
        "startedAt": "2023-03-15T05:13:32.256Z",
        "endedAt": "2023-03-15T05:13:36.569Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 3,
        "tests": 9,
        "passes": 9,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:13:32.246Z",
        "end": "2023-03-15T05:13:36.561Z",
        "duration": 4315
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/assertions');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Assertions",
            "Implicit Assertions",
            ".should() - make an assertion about the current subject"
          ],
          "state": "passed",
          "body": "() => {\n      // https://on.cypress.io/should\n      cy.get('.assertion-table').find('tbody tr:last').should('have.class', 'success').find('td').first()\n      // checking the text of the <td> element in various ways\n      .should('have.text', 'Column content').should('contain', 'Column content').should('have.html', 'Column content')\n      // chai-jquery uses \"is()\" to check if element matches selector\n      .should('match', 'td')\n      // to match text content against a regular expression\n      // first need to invoke jQuery method text()\n      // and then match using regular expression\n      .invoke('text').should('match', /column content/i);\n\n      // a better way to check element's text content against a regular expression\n      // is to use \"cy.contains\"\n      // https://on.cypress.io/contains\n      cy.get('.assertion-table').find('tbody tr:last')\n      // finds first <td> element with text content matching regular expression\n      .contains('td', /column content/i).should('be.visible');\n\n      // for more information about asserting element's text\n      // see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-element’s-text-contents\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2237,
              "duration": 467,
              "startedAt": "2023-03-15T05:13:33.379Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Assertions",
            "Implicit Assertions",
            ".and() - chain multiple assertions together"
          ],
          "state": "passed",
          "body": "() => {\n      // https://on.cypress.io/and\n      cy.get('.assertions-link').should('have.class', 'active').and('have.attr', 'href').and('include', 'cypress.io');\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2707,
              "duration": 171,
              "startedAt": "2023-03-15T05:13:33.849Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Assertions",
            "Explicit Assertions",
            "expect - make an assertion about a specified subject"
          ],
          "state": "passed",
          "body": "() => {\n      // We can use Chai's BDD style assertions\n      expect(true).to.be.true;\n      const o = {\n        foo: 'bar'\n      };\n      expect(o).to.equal(o);\n      expect(o).to.deep.equal({\n        foo: 'bar'\n      });\n      // matching text using regular expression\n      expect('FooBar').to.match(/bar$/i);\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2879,
              "duration": 150,
              "startedAt": "2023-03-15T05:13:34.021Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Assertions",
            "Explicit Assertions",
            "pass your own callback function to should()"
          ],
          "state": "passed",
          "body": "() => {\n      // Pass a function to should that can have any number\n      // of explicit assertions within it.\n      // The \".should(cb)\" function will be retried\n      // automatically until it passes all your explicit assertions or times out.\n      cy.get('.assertions-p').find('p').should($p => {\n        // https://on.cypress.io/$\n        // return an array of texts from all of the p's\n        const texts = $p.map((i, el) => Cypress.$(el).text());\n\n        // jquery map returns jquery object\n        // and .get() convert this to simple array\n        const paragraphs = texts.get();\n\n        // array should have length of 3\n        expect(paragraphs, 'has 3 paragraphs').to.have.length(3);\n\n        // use second argument to expect(...) to provide clear\n        // message with each assertion\n        expect(paragraphs, 'has expected text in each paragraph').to.deep.eq(['Some text from first p', 'More text from second p', 'And even more text from third p']);\n      });\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3030,
              "duration": 158,
              "startedAt": "2023-03-15T05:13:34.172Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Assertions",
            "Explicit Assertions",
            "finds element by class name regex"
          ],
          "state": "passed",
          "body": "() => {\n      cy.get('.docs-header').find('div')\n      // .should(cb) callback function will be retried\n      .should($div => {\n        expect($div).to.have.length(1);\n        const className = $div[0].className;\n        expect(className).to.match(/heading-/);\n      })\n      // .then(cb) callback is not retried,\n      // it either passes or fails\n      .then($div => {\n        expect($div, 'text content').to.have.text('Introduction');\n      });\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3189,
              "duration": 171,
              "startedAt": "2023-03-15T05:13:34.331Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Assertions",
            "Explicit Assertions",
            "can throw any error"
          ],
          "state": "passed",
          "body": "() => {\n      cy.get('.docs-header').find('div').should($div => {\n        if ($div.length !== 1) {\n          // you can throw your own errors\n          throw new Error('Did not find 1 element');\n        }\n        const className = $div[0].className;\n        if (!className.match(/heading-/)) {\n          throw new Error(`Could not find class \"heading-\" in ${className}`);\n        }\n      });\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3361,
              "duration": 131,
              "startedAt": "2023-03-15T05:13:34.503Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Assertions",
            "Explicit Assertions",
            "matches unknown text between two elements"
          ],
          "state": "passed",
          "body": "() => {\n      /**\n       * Text from the first element.\n       * @type {string}\n      */\n      let text;\n\n      /**\n       * Normalizes passed text,\n       * useful before comparing text with spaces and different capitalization.\n       * @param {string} s Text to normalize\n      */\n      const normalizeText = s => s.replace(/\\s/g, '').toLowerCase();\n      cy.get('.two-elements').find('.first').then($first => {\n        // save text from the first element\n        text = normalizeText($first.text());\n      });\n      cy.get('.two-elements').find('.second').should($div => {\n        // we can massage text before comparing\n        const secondText = normalizeText($div.text());\n        expect(secondText, 'second text').to.equal(text);\n      });\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3493,
              "duration": 151,
              "startedAt": "2023-03-15T05:13:34.635Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Assertions",
            "Explicit Assertions",
            "assert - assert shape of an object"
          ],
          "state": "passed",
          "body": "() => {\n      const person = {\n        name: 'Joe',\n        age: 20\n      };\n      assert.isObject(person, 'value is object');\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3645,
              "duration": 133,
              "startedAt": "2023-03-15T05:13:34.787Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Assertions",
            "Explicit Assertions",
            "retries the should callback until assertions pass"
          ],
          "state": "passed",
          "body": "() => {\n      cy.get('#random-number').should($div => {\n        const n = parseFloat($div.text());\n        expect(n).to.be.gte(1).and.be.lte(10);\n      });\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3780,
              "duration": 1645,
              "startedAt": "2023-03-15T05:13:34.922Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\assertions.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "assertions.cy.js",
        "fileName": "assertions",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/assertions.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/assertions.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/assertions.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 2,
        "tests": 8,
        "passes": 8,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 2677,
        "startedAt": "2023-03-15T05:13:39.400Z",
        "endedAt": "2023-03-15T05:13:42.077Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 2,
        "tests": 8,
        "passes": 8,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:13:39.389Z",
        "end": "2023-03-15T05:13:42.069Z",
        "duration": 2680
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/connectors');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Connectors",
            ".each() - iterate over an array of elements"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/each\n    cy.get('.connectors-each-ul>li').each(($el, index, $list) => {\n      console.log($el, index, $list);\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2226,
              "duration": 442,
              "startedAt": "2023-03-15T05:13:40.533Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Connectors",
            ".its() - get properties on the current subject"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/its\n    cy.get('.connectors-its-ul>li')\n    // calls the 'length' property yielding that value\n    .its('length').should('be.gt', 2);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2670,
              "duration": 171,
              "startedAt": "2023-03-15T05:13:40.977Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Connectors",
            ".invoke() - invoke a function on the current subject"
          ],
          "state": "passed",
          "body": "() => {\n    // our div is hidden in our script.js\n    // $('.connectors-div').hide()\n    cy.get('.connectors-div').should('be.hidden');\n\n    // https://on.cypress.io/invoke\n    // call the jquery method 'show' on the 'div.container'\n    cy.get('.connectors-div').invoke('show');\n    cy.get('.connectors-div').should('be.visible');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2842,
              "duration": 172,
              "startedAt": "2023-03-15T05:13:41.149Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Connectors",
            ".spread() - spread an array as individual args to callback function"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/spread\n    const arr = ['foo', 'bar', 'baz'];\n    cy.wrap(arr).spread((foo, bar, baz) => {\n      expect(foo).to.eq('foo');\n      expect(bar).to.eq('bar');\n      expect(baz).to.eq('baz');\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3015,
              "duration": 150,
              "startedAt": "2023-03-15T05:13:41.322Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Connectors",
            ".then()",
            "invokes a callback function with the current subject"
          ],
          "state": "passed",
          "body": "() => {\n      // https://on.cypress.io/then\n      cy.get('.connectors-list > li').then($lis => {\n        expect($lis, '3 items').to.have.length(3);\n        expect($lis.eq(0), 'first item').to.contain('Walk the dog');\n        expect($lis.eq(1), 'second item').to.contain('Feed the cat');\n        expect($lis.eq(2), 'third item').to.contain('Write JavaScript');\n      });\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3167,
              "duration": 151,
              "startedAt": "2023-03-15T05:13:41.474Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Connectors",
            ".then()",
            "yields the returned value to the next command"
          ],
          "state": "passed",
          "body": "() => {\n      cy.wrap(1).then(num => {\n        expect(num).to.equal(1);\n        return 2;\n      }).then(num => {\n        expect(num).to.equal(2);\n      });\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3320,
              "duration": 157,
              "startedAt": "2023-03-15T05:13:41.627Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Connectors",
            ".then()",
            "yields the original subject without return"
          ],
          "state": "passed",
          "body": "() => {\n      cy.wrap(1).then(num => {\n        expect(num).to.equal(1);\n        // note that nothing is returned from this callback\n      }).then(num => {\n        // this callback receives the original unchanged value 1\n        expect(num).to.equal(1);\n      });\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3478,
              "duration": 135,
              "startedAt": "2023-03-15T05:13:41.785Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Connectors",
            ".then()",
            "yields the value yielded by the last Cypress command inside"
          ],
          "state": "passed",
          "body": "() => {\n      cy.wrap(1).then(num => {\n        expect(num).to.equal(1);\n        // note how we run a Cypress command\n        // the result yielded by this Cypress command\n        // will be passed to the second \".then\"\n        cy.wrap(2);\n      }).then(num => {\n        // this callback receives the value yielded by \"cy.wrap(2)\"\n        expect(num).to.equal(2);\n      });\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3614,
              "duration": 155,
              "startedAt": "2023-03-15T05:13:41.921Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\connectors.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "connectors.cy.js",
        "fileName": "connectors",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/connectors.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/connectors.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/connectors.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 7,
        "passes": 7,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 3180,
        "startedAt": "2023-03-15T05:13:44.768Z",
        "endedAt": "2023-03-15T05:13:47.948Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 7,
        "passes": 7,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:13:44.757Z",
        "end": "2023-03-15T05:13:47.939Z",
        "duration": 3182
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    Cypress.Cookies.debug(true);\n    cy.visit('https://example.cypress.io/commands/cookies');\n\n    // clear cookies again after visiting to remove\n    // any 3rd party cookies picked up such as cloudflare\n    cy.clearCookies();\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Cookies",
            "cy.getCookie() - get a browser cookie"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/getcookie\n    cy.get('#getCookie .set-a-cookie').click();\n\n    // cy.getCookie() yields a cookie object\n    cy.getCookie('token').should('have.property', 'value', '123ABC');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2219,
              "duration": 490,
              "startedAt": "2023-03-15T05:13:45.899Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cookies",
            "cy.getCookies() - get browser cookies for the current domain"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/getcookies\n    cy.getCookies().should('be.empty');\n    cy.get('#getCookies .set-a-cookie').click();\n\n    // cy.getCookies() yields an array of cookies\n    cy.getCookies().should('have.length', 1).should(cookies => {\n      // each cookie has these properties\n      expect(cookies[0]).to.have.property('name', 'token');\n      expect(cookies[0]).to.have.property('value', '123ABC');\n      expect(cookies[0]).to.have.property('httpOnly', false);\n      expect(cookies[0]).to.have.property('secure', false);\n      expect(cookies[0]).to.have.property('domain');\n      expect(cookies[0]).to.have.property('path');\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2711,
              "duration": 248,
              "startedAt": "2023-03-15T05:13:46.391Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cookies",
            "cy.getAllCookies() - get all browser cookies"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/getallcookies\n    cy.getAllCookies().should('be.empty');\n    cy.setCookie('key', 'value');\n    cy.setCookie('key', 'value', {\n      domain: '.example.com'\n    });\n\n    // cy.getAllCookies() yields an array of cookies\n    cy.getAllCookies().should('have.length', 2).should(cookies => {\n      // each cookie has these properties\n      expect(cookies[0]).to.have.property('name', 'key');\n      expect(cookies[0]).to.have.property('value', 'value');\n      expect(cookies[0]).to.have.property('httpOnly', false);\n      expect(cookies[0]).to.have.property('secure', false);\n      expect(cookies[0]).to.have.property('domain');\n      expect(cookies[0]).to.have.property('path');\n      expect(cookies[1]).to.have.property('name', 'key');\n      expect(cookies[1]).to.have.property('value', 'value');\n      expect(cookies[1]).to.have.property('httpOnly', false);\n      expect(cookies[1]).to.have.property('secure', false);\n      expect(cookies[1]).to.have.property('domain', '.example.com');\n      expect(cookies[1]).to.have.property('path');\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2960,
              "duration": 167,
              "startedAt": "2023-03-15T05:13:46.640Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cookies",
            "cy.setCookie() - set a browser cookie"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/setcookie\n    cy.getCookies().should('be.empty');\n    cy.setCookie('foo', 'bar');\n\n    // cy.getCookie() yields a cookie object\n    cy.getCookie('foo').should('have.property', 'value', 'bar');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3128,
              "duration": 330,
              "startedAt": "2023-03-15T05:13:46.808Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cookies",
            "cy.clearCookie() - clear a browser cookie"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/clearcookie\n    cy.getCookie('token').should('be.null');\n    cy.get('#clearCookie .set-a-cookie').click();\n    cy.getCookie('token').should('have.property', 'value', '123ABC');\n\n    // cy.clearCookies() yields null\n    cy.clearCookie('token').should('be.null');\n    cy.getCookie('token').should('be.null');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3459,
              "duration": 234,
              "startedAt": "2023-03-15T05:13:47.139Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cookies",
            "cy.clearCookies() - clear browser cookies for the current domain"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/clearcookies\n    cy.getCookies().should('be.empty');\n    cy.get('#clearCookies .set-a-cookie').click();\n    cy.getCookies().should('have.length', 1);\n\n    // cy.clearCookies() yields null\n    cy.clearCookies();\n    cy.getCookies().should('be.empty');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3694,
              "duration": 231,
              "startedAt": "2023-03-15T05:13:47.374Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cookies",
            "cy.clearAllCookies() - clear all browser cookies"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/clearallcookies\n    cy.getAllCookies().should('be.empty');\n    cy.setCookie('key', 'value');\n    cy.setCookie('key', 'value', {\n      domain: '.example.com'\n    });\n    cy.getAllCookies().should('have.length', 2);\n\n    // cy.clearAllCookies() yields null\n    cy.clearAllCookies();\n    cy.getAllCookies().should('be.empty');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3926,
              "duration": 341,
              "startedAt": "2023-03-15T05:13:47.606Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\cookies.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "cookies.cy.js",
        "fileName": "cookies",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/cookies.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/cookies.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/cookies.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 10,
        "tests": 10,
        "passes": 10,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 2920,
        "startedAt": "2023-03-15T05:13:50.670Z",
        "endedAt": "2023-03-15T05:13:53.590Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 10,
        "tests": 10,
        "passes": 10,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:13:50.660Z",
        "end": "2023-03-15T05:13:53.587Z",
        "duration": 2927
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/cypress-api');\n  }"
        },
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/cypress-api');\n  }"
        },
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/cypress-api');\n  }"
        },
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/cypress-api');\n  }"
        },
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/cypress-api');\n  }"
        },
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/cypress-api');\n  }"
        },
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/cypress-api');\n  }"
        },
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/cypress-api');\n  }"
        },
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/cypress-api');\n  }"
        },
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/cypress-api');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Cypress.Commands",
            ".add() - create a custom command"
          ],
          "state": "passed",
          "body": "() => {\n    Cypress.Commands.add('console', {\n      prevSubject: true\n    }, (subject, method) => {\n      // the previous subject is automatically received\n      // and the commands arguments are shifted\n\n      // allow us to change the console method used\n      method = method || 'log';\n\n      // log the subject to the console\n      console[method]('The subject is', subject);\n\n      // whatever we return becomes the new subject\n      // we don't want to change the subject so\n      // we return whatever was passed in\n      return subject;\n    });\n    cy.get('button').console('info').then($button => {\n      // subject is still $button\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2205,
              "duration": 373,
              "startedAt": "2023-03-15T05:13:51.813Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cypress.Cookies",
            ".debug() - enable or disable debugging"
          ],
          "state": "passed",
          "body": "() => {\n    Cypress.Cookies.debug(true);\n\n    // Cypress will now log in the console when\n    // cookies are set or cleared\n    cy.setCookie('fakeCookie', '123ABC');\n    cy.clearCookie('fakeCookie');\n    cy.setCookie('fakeCookie', '123ABC');\n    cy.clearCookie('fakeCookie');\n    cy.setCookie('fakeCookie', '123ABC');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2580,
              "duration": 186,
              "startedAt": "2023-03-15T05:13:52.188Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cypress.arch",
            "Get CPU architecture name of underlying OS"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/arch\n    expect(Cypress.arch).to.exist;\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2767,
              "duration": 132,
              "startedAt": "2023-03-15T05:13:52.375Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cypress.config()",
            "Get and set configuration options"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/config\n    let myConfig = Cypress.config();\n    expect(myConfig).to.have.property('animationDistanceThreshold', 5);\n    expect(myConfig).to.have.property('baseUrl', null);\n    expect(myConfig).to.have.property('defaultCommandTimeout', 4000);\n    expect(myConfig).to.have.property('requestTimeout', 5000);\n    expect(myConfig).to.have.property('responseTimeout', 30000);\n    expect(myConfig).to.have.property('viewportHeight', 660);\n    expect(myConfig).to.have.property('viewportWidth', 1000);\n    expect(myConfig).to.have.property('pageLoadTimeout', 60000);\n    expect(myConfig).to.have.property('waitForAnimations', true);\n    expect(Cypress.config('pageLoadTimeout')).to.eq(60000);\n\n    // this will change the config for the rest of your tests!\n    Cypress.config('pageLoadTimeout', 20000);\n    expect(Cypress.config('pageLoadTimeout')).to.eq(20000);\n    Cypress.config('pageLoadTimeout', 60000);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2900,
              "duration": 172,
              "startedAt": "2023-03-15T05:13:52.508Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cypress.dom",
            ".isHidden() - determine if a DOM element is hidden"
          ],
          "state": "passed",
          "body": "() => {\n    let hiddenP = Cypress.$('.dom-p p.hidden').get(0);\n    let visibleP = Cypress.$('.dom-p p.visible').get(0);\n\n    // our first paragraph has css class 'hidden'\n    expect(Cypress.dom.isHidden(hiddenP)).to.be.true;\n    expect(Cypress.dom.isHidden(visibleP)).to.be.false;\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3073,
              "duration": 148,
              "startedAt": "2023-03-15T05:13:52.681Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cypress.env()",
            "Get environment variables"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/env\n    // set multiple environment variables\n    Cypress.env({\n      host: 'veronica.dev.local',\n      api_server: 'http://localhost:8888/v1/'\n    });\n\n    // get environment variable\n    expect(Cypress.env('host')).to.eq('veronica.dev.local');\n\n    // set environment variable\n    Cypress.env('api_server', 'http://localhost:8888/v2/');\n    expect(Cypress.env('api_server')).to.eq('http://localhost:8888/v2/');\n\n    // get all environment variable\n    expect(Cypress.env()).to.have.property('host', 'veronica.dev.local');\n    expect(Cypress.env()).to.have.property('api_server', 'http://localhost:8888/v2/');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3223,
              "duration": 170,
              "startedAt": "2023-03-15T05:13:52.831Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cypress.log",
            "Control what is printed to the Command Log"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/cypress-log\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3395,
              "duration": 154,
              "startedAt": "2023-03-15T05:13:53.003Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cypress.platform",
            "Get underlying OS name"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/platform\n    expect(Cypress.platform).to.be.exist;\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3551,
              "duration": 145,
              "startedAt": "2023-03-15T05:13:53.159Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cypress.version",
            "Get current version of Cypress being run"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/version\n    expect(Cypress.version).to.be.exist;\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3698,
              "duration": 148,
              "startedAt": "2023-03-15T05:13:53.306Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Cypress.spec",
            "Get current spec information"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/spec\n    // wrap the object so we can inspect it easily by clicking in the command log\n    cy.wrap(Cypress.spec).should('include.keys', ['name', 'relative', 'absolute']);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3847,
              "duration": 134,
              "startedAt": "2023-03-15T05:13:53.455Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\cypress_api.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "cypress_api.cy.js",
        "fileName": "cypress_api",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/cypress_api.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/cypress_api.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/cypress_api.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 4,
        "passes": 4,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 2848,
        "startedAt": "2023-03-15T05:13:56.425Z",
        "endedAt": "2023-03-15T05:13:59.273Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 4,
        "passes": 4,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:13:56.428Z",
        "end": "2023-03-15T05:13:59.277Z",
        "duration": 2849
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/files');\n  }"
        },
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    // load example.json fixture file and store\n    // in the test context object\n    cy.fixture('example.json').as('example');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Files",
            "cy.fixture() - load a fixture"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/fixture\n\n    // Instead of writing a response inline you can\n    // use a fixture file's content.\n\n    // when application makes an Ajax request matching \"GET **/comments/*\"\n    // Cypress will intercept it and reply with the object in `example.json` fixture\n    cy.intercept('GET', '**/comments/*', {\n      fixture: 'example.json'\n    }).as('getComment');\n\n    // we have code that gets a comment when\n    // the button is clicked in scripts.js\n    cy.get('.fixture-btn').click();\n    cy.wait('@getComment').its('response.body').should('have.property', 'name').and('include', 'Using fixtures to represent data');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2310,
              "duration": 499,
              "startedAt": "2023-03-15T05:13:57.540Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Files",
            "cy.fixture() or require - load a fixture"
          ],
          "state": "passed",
          "body": "function () {\n    // we are inside the \"function () { ... }\"\n    // callback and can use test context object \"this\"\n    // \"this.example\" was loaded in \"beforeEach\" function callback\n    expect(this.example, 'fixture in the test context').to.deep.equal(requiredExample);\n\n    // or use \"cy.wrap\" and \"should('deep.equal', ...)\" assertion\n    cy.wrap(this.example).should('deep.equal', requiredExample);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2811,
              "duration": 163,
              "startedAt": "2023-03-15T05:13:58.041Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Files",
            "cy.readFile() - read file contents"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/readfile\n\n    // You can read a file and yield its contents\n    // The filePath is relative to your project's root.\n    cy.readFile(Cypress.config('configFile')).then(config => {\n      expect(config).to.be.an('string');\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2975,
              "duration": 133,
              "startedAt": "2023-03-15T05:13:58.205Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Files",
            "cy.writeFile() - write to a file"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/writefile\n\n    // You can write to a file\n\n    // Use a response from a request to automatically\n    // generate a fixture file for use later\n    cy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n      cy.writeFile('cypress/fixtures/users.json', response.body);\n    });\n    cy.fixture('users').should(users => {\n      expect(users[0].name).to.exist;\n    });\n\n    // JavaScript arrays and objects are stringified\n    // and formatted into text.\n    cy.writeFile('cypress/fixtures/profile.json', {\n      id: 8739,\n      name: 'Jane',\n      email: 'jane@example.com'\n    });\n    cy.fixture('profile').should(profile => {\n      expect(profile.name).to.eq('Jane');\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3110,
              "duration": 932,
              "startedAt": "2023-03-15T05:13:58.340Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\files.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "files.cy.js",
        "fileName": "files",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/files.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/files.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/files.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 3,
        "passes": 3,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 1780,
        "startedAt": "2023-03-15T05:14:01.888Z",
        "endedAt": "2023-03-15T05:14:03.668Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 3,
        "passes": 3,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:14:01.890Z",
        "end": "2023-03-15T05:14:03.673Z",
        "duration": 1783
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/location');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Location",
            "cy.hash() - get the current URL hash"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/hash\n    cy.hash().should('be.empty');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2115,
              "duration": 359,
              "startedAt": "2023-03-15T05:14:03.006Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Location",
            "cy.location() - get window.location"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/location\n    cy.location().should(location => {\n      expect(location.hash).to.be.empty;\n      expect(location.href).to.eq('https://example.cypress.io/commands/location');\n      expect(location.host).to.eq('example.cypress.io');\n      expect(location.hostname).to.eq('example.cypress.io');\n      expect(location.origin).to.eq('https://example.cypress.io');\n      expect(location.pathname).to.eq('/commands/location');\n      expect(location.port).to.eq('');\n      expect(location.protocol).to.eq('https:');\n      expect(location.search).to.be.empty;\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2476,
              "duration": 142,
              "startedAt": "2023-03-15T05:14:03.367Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Location",
            "cy.url() - get the current URL"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/url\n    cy.url().should('eq', 'https://example.cypress.io/commands/location');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2620,
              "duration": 155,
              "startedAt": "2023-03-15T05:14:03.511Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\location.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "location.cy.js",
        "fileName": "location",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/location.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/location.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/location.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 2,
        "tests": 6,
        "passes": 6,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 3753,
        "startedAt": "2023-03-15T05:14:06.138Z",
        "endedAt": "2023-03-15T05:14:09.891Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 2,
        "tests": 6,
        "passes": 6,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:14:06.139Z",
        "end": "2023-03-15T05:14:09.896Z",
        "duration": 3757
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/misc');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Misc",
            ".end() - end the command chain"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/end\n\n    // cy.end is useful when you want to end a chain of commands\n    // and force Cypress to re-query from the root element\n    cy.get('.misc-table').within(() => {\n      // ends the current chain and yields null\n      cy.contains('Cheryl').click().end();\n\n      // queries the entire table again\n      cy.contains('Charles').click();\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2097,
              "duration": 579,
              "startedAt": "2023-03-15T05:14:07.265Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Misc",
            "cy.exec() - execute a system command"
          ],
          "state": "passed",
          "body": "() => {\n    // execute a system command.\n    // so you can take actions necessary for\n    // your test outside the scope of Cypress.\n    // https://on.cypress.io/exec\n\n    // we can use Cypress.platform string to\n    // select appropriate command\n    // https://on.cypress/io/platform\n    cy.log(`Platform ${Cypress.platform} architecture ${Cypress.arch}`);\n\n    // on CircleCI Windows build machines we have a failure to run bash shell\n    // https://github.com/cypress-io/cypress/issues/5169\n    // so skip some of the tests by passing flag \"--env circle=true\"\n    const isCircleOnWindows = Cypress.platform === 'win32' && Cypress.env('circle');\n    if (isCircleOnWindows) {\n      cy.log('Skipping test on CircleCI');\n      return;\n    }\n\n    // cy.exec problem on Shippable CI\n    // https://github.com/cypress-io/cypress/issues/6718\n    const isShippable = Cypress.platform === 'linux' && Cypress.env('shippable');\n    if (isShippable) {\n      cy.log('Skipping test on ShippableCI');\n      return;\n    }\n    cy.exec('echo Jane Lane').its('stdout').should('contain', 'Jane Lane');\n    if (Cypress.platform === 'win32') {\n      cy.exec(`print ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n    } else {\n      cy.exec(`cat ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n      cy.exec('pwd').its('code').should('eq', 0);\n    }\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2678,
              "duration": 218,
              "startedAt": "2023-03-15T05:14:07.846Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Misc",
            "cy.focused() - get the DOM element that has focus"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/focused\n    cy.get('.misc-form').find('#name').click();\n    cy.focused().should('have.id', 'name');\n    cy.get('.misc-form').find('#description').click();\n    cy.focused().should('have.id', 'description');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2897,
              "duration": 321,
              "startedAt": "2023-03-15T05:14:08.065Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Misc",
            "cy.wrap() - wrap an object"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/wrap\n    cy.wrap({\n      foo: 'bar'\n    }).should('have.property', 'foo').and('include', 'bar');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3219,
              "duration": 142,
              "startedAt": "2023-03-15T05:14:08.387Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Misc",
            "Cypress.Screenshot",
            "cy.screenshot() - take a screenshot"
          ],
          "state": "passed",
          "body": "() => {\n      // https://on.cypress.io/screenshot\n      cy.screenshot('my-image');\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3363,
              "duration": 1224,
              "startedAt": "2023-03-15T05:14:08.531Z",
              "screenshots": [
                {
                  "name": "my-image",
                  "takenAt": "2023-03-15T05:14:09.131Z",
                  "path": "D:\\Cypress Practice\\cypress\\screenshots\\2-advanced-examples\\misc.cy.js\\my-image.png",
                  "height": 1816,
                  "width": 1000
                }
              ]
            }
          ]
        },
        {
          "title": [
            "Misc",
            "Cypress.Screenshot",
            "Cypress.Screenshot.defaults() - change default config of screenshots"
          ],
          "state": "passed",
          "body": "function () {\n      Cypress.Screenshot.defaults({\n        blackout: ['.foo'],\n        capture: 'viewport',\n        clip: {\n          x: 0,\n          y: 0,\n          width: 200,\n          height: 200\n        },\n        scale: false,\n        disableTimersAndAnimations: true,\n        screenshotOnRunFailure: true,\n        onBeforeScreenshot() {},\n        onAfterScreenshot() {}\n      });\n    }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 4590,
              "duration": 132,
              "startedAt": "2023-03-15T05:14:09.758Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\misc.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "misc.cy.js",
        "fileName": "misc",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/misc.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/misc.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/misc.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 3,
        "passes": 3,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 3329,
        "startedAt": "2023-03-15T05:14:12.978Z",
        "endedAt": "2023-03-15T05:14:16.307Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 3,
        "passes": 3,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:14:12.980Z",
        "end": "2023-03-15T05:14:16.312Z",
        "duration": 3332
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io');\n    cy.get('.navbar-nav').contains('Commands').click();\n    cy.get('.dropdown-menu').contains('Navigation').click();\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Navigation",
            "cy.go() - go back or forward in the browser's history"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/go\n\n    cy.location('pathname').should('include', 'navigation');\n    cy.go('back');\n    cy.location('pathname').should('not.include', 'navigation');\n    cy.go('forward');\n    cy.location('pathname').should('include', 'navigation');\n\n    // clicking back\n    cy.go(-1);\n    cy.location('pathname').should('not.include', 'navigation');\n\n    // clicking forward\n    cy.go(1);\n    cy.location('pathname').should('include', 'navigation');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2453,
              "duration": 1133,
              "startedAt": "2023-03-15T05:14:14.064Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Navigation",
            "cy.reload() - reload the page"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/reload\n    cy.reload();\n\n    // reload the page without using the cache\n    cy.reload(true);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3588,
              "duration": 593,
              "startedAt": "2023-03-15T05:14:15.199Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Navigation",
            "cy.visit() - visit a remote url"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/visit\n\n    // Visit any sub-domain of your current domain\n\n    // Pass options to the visit\n    cy.visit('https://example.cypress.io/commands/navigation', {\n      timeout: 50000,\n      // increase total time for the visit to resolve\n      onBeforeLoad(contentWindow) {\n        // contentWindow is the remote page's window object\n        expect(typeof contentWindow === 'object').to.be.true;\n      },\n      onLoad(contentWindow) {\n        // contentWindow is the remote page's window object\n        expect(typeof contentWindow === 'object').to.be.true;\n      }\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 4182,
              "duration": 512,
              "startedAt": "2023-03-15T05:14:15.793Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\navigation.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "navigation.cy.js",
        "fileName": "navigation",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/navigation.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/navigation.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/navigation.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 6,
        "passes": 6,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 10943,
        "startedAt": "2023-03-15T05:14:19.046Z",
        "endedAt": "2023-03-15T05:14:29.989Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 6,
        "passes": 6,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:14:19.049Z",
        "end": "2023-03-15T05:14:29.994Z",
        "duration": 10945
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/network-requests');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Network Requests",
            "cy.request() - make an XHR request"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/request\n    cy.request('https://jsonplaceholder.cypress.io/comments').should(response => {\n      expect(response.status).to.eq(200);\n      // the server sometimes gets an extra comment posted from another machine\n      // which gets returned as 1 extra object\n      expect(response.body).to.have.property('length').and.be.oneOf([500, 501]);\n      expect(response).to.have.property('headers');\n      expect(response).to.have.property('duration');\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2113,
              "duration": 1771,
              "startedAt": "2023-03-15T05:14:20.109Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Network Requests",
            "cy.request() - verify response using BDD syntax"
          ],
          "state": "passed",
          "body": "() => {\n    cy.request('https://jsonplaceholder.cypress.io/comments').then(response => {\n      // https://on.cypress.io/assertions\n      expect(response).property('status').to.equal(200);\n      expect(response).property('body').to.have.property('length').and.be.oneOf([500, 501]);\n      expect(response).to.include.keys('headers', 'duration');\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3887,
              "duration": 1319,
              "startedAt": "2023-03-15T05:14:21.883Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Network Requests",
            "cy.request() with query parameters"
          ],
          "state": "passed",
          "body": "() => {\n    // will execute request\n    // https://jsonplaceholder.cypress.io/comments?postId=1&id=3\n    cy.request({\n      url: 'https://jsonplaceholder.cypress.io/comments',\n      qs: {\n        postId: 1,\n        id: 3\n      }\n    }).its('body').should('be.an', 'array').and('have.length', 1).its('0') // yields first element of the array\n    .should('contain', {\n      postId: 1,\n      id: 3\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 5209,
              "duration": 891,
              "startedAt": "2023-03-15T05:14:23.205Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Network Requests",
            "cy.request() - pass result to the second request"
          ],
          "state": "passed",
          "body": "() => {\n    // first, let's find out the userId of the first user we have\n    cy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body') // yields the response object\n    .its('0') // yields the first element of the returned list\n    // the above two commands its('body').its('0')\n    // can be written as its('body.0')\n    // if you do not care about TypeScript checks\n    .then(user => {\n      expect(user).property('id').to.be.a('number');\n      // make a new post on behalf of the user\n      cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n        userId: user.id,\n        title: 'Cypress Test Runner',\n        body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n      });\n    })\n    // note that the value here is the returned value of the 2nd request\n    // which is the new post object\n    .then(response => {\n      expect(response).property('status').to.equal(201); // new entity created\n      expect(response).property('body').to.contain({\n        title: 'Cypress Test Runner'\n      });\n\n      // we don't know the exact post id - only that it will be > 100\n      // since JSONPlaceholder has built-in 100 posts\n      expect(response.body).property('id').to.be.a('number').and.to.be.gt(100);\n\n      // we don't know the user id here - since it was in above closure\n      // so in this test just confirm that the property is there\n      expect(response.body).property('userId').to.be.a('number');\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 6101,
              "duration": 1652,
              "startedAt": "2023-03-15T05:14:24.097Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Network Requests",
            "cy.request() - save response in the shared test context"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/variables-and-aliases\n    cy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body').its('0') // yields the first element of the returned list\n    .as('user') // saves the object in the test context\n    .then(function () {\n      // NOTE 👀\n      //  By the time this callback runs the \"as('user')\" command\n      //  has saved the user object in the test context.\n      //  To access the test context we need to use\n      //  the \"function () { ... }\" callback form,\n      //  otherwise \"this\" points at a wrong or undefined object!\n      cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n        userId: this.user.id,\n        title: 'Cypress Test Runner',\n        body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n      }).its('body').as('post'); // save the new post from the response\n    }).then(function () {\n      // When this callback runs, both \"cy.request\" API commands have finished\n      // and the test context has \"user\" and \"post\" objects set.\n      // Let's verify them.\n      expect(this.post, 'post has the right user id').property('userId').to.equal(this.user.id);\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 7754,
              "duration": 1616,
              "startedAt": "2023-03-15T05:14:25.750Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Network Requests",
            "cy.intercept() - route responses to matching requests"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/intercept\n\n    let message = 'whoa, this comment does not exist';\n\n    // Listen to GET to comments/1\n    cy.intercept('GET', '**/comments/*').as('getComment');\n\n    // we have code that gets a comment when\n    // the button is clicked in scripts.js\n    cy.get('.network-btn').click();\n\n    // https://on.cypress.io/wait\n    cy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);\n\n    // Listen to POST to comments\n    cy.intercept('POST', '**/comments').as('postComment');\n\n    // we have code that posts a comment when\n    // the button is clicked in scripts.js\n    cy.get('.network-post').click();\n    cy.wait('@postComment').should(({\n      request,\n      response\n    }) => {\n      expect(request.body).to.include('email');\n      expect(request.headers).to.have.property('content-type');\n      expect(response && response.body).to.have.property('name', 'Using POST in cy.intercept()');\n    });\n\n    // Stub a response to PUT comments/ ****\n    cy.intercept({\n      method: 'PUT',\n      url: '**/comments/*'\n    }, {\n      statusCode: 404,\n      body: {\n        error: message\n      },\n      headers: {\n        'access-control-allow-origin': '*'\n      },\n      delayMs: 500\n    }).as('putComment');\n\n    // we have code that puts a comment when\n    // the button is clicked in scripts.js\n    cy.get('.network-put').click();\n    cy.wait('@putComment');\n\n    // our 404 statusCode logic in scripts.js executed\n    cy.get('.network-put-comment').should('contain', message);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 9370,
              "duration": 2622,
              "startedAt": "2023-03-15T05:14:27.366Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\network_requests.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "network_requests.cy.js",
        "fileName": "network_requests",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/network_requests.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/network_requests.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/network_requests.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 5,
        "passes": 5,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 3110,
        "startedAt": "2023-03-15T05:14:33.332Z",
        "endedAt": "2023-03-15T05:14:36.442Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 5,
        "passes": 5,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:14:33.334Z",
        "end": "2023-03-15T05:14:36.445Z",
        "duration": 3111
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/querying');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Querying",
            "cy.get() - query DOM elements"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/get\n\n    cy.get('#query-btn').should('contain', 'Button');\n    cy.get('.query-btn').should('contain', 'Button');\n    cy.get('#querying .well>button:first').should('contain', 'Button');\n    //              ↲\n    // Use CSS selectors just like jQuery\n\n    cy.get('[data-test-id=\"test-example\"]').should('have.class', 'example');\n\n    // 'cy.get()' yields jQuery object, you can get its attribute\n    // by invoking `.attr()` method\n    cy.get('[data-test-id=\"test-example\"]').invoke('attr', 'data-test-id').should('equal', 'test-example');\n\n    // or you can get element's CSS property\n    cy.get('[data-test-id=\"test-example\"]').invoke('css', 'position').should('equal', 'static');\n\n    // or use assertions directly during 'cy.get()'\n    // https://on.cypress.io/assertions\n    cy.get('[data-test-id=\"test-example\"]').should('have.attr', 'data-test-id', 'test-example').and('have.css', 'position', 'static');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2726,
              "duration": 421,
              "startedAt": "2023-03-15T05:14:34.781Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Querying",
            "cy.contains() - query DOM elements with matching content"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/contains\n    cy.get('.query-list').contains('bananas').should('have.class', 'third');\n\n    // we can pass a regexp to `.contains()`\n    cy.get('.query-list').contains(/^b\\w+/).should('have.class', 'third');\n    cy.get('.query-list').contains('apples').should('have.class', 'first');\n\n    // passing a selector to contains will\n    // yield the selector containing the text\n    cy.get('#querying').contains('ul', 'oranges').should('have.class', 'query-list');\n    cy.get('.query-button').contains('Save Form').should('have.class', 'btn');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3149,
              "duration": 184,
              "startedAt": "2023-03-15T05:14:35.204Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Querying",
            ".within() - query DOM elements within a specific element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/within\n    cy.get('.query-form').within(() => {\n      cy.get('input:first').should('have.attr', 'placeholder', 'Email');\n      cy.get('input:last').should('have.attr', 'placeholder', 'Password');\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3335,
              "duration": 147,
              "startedAt": "2023-03-15T05:14:35.390Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Querying",
            "cy.root() - query the root DOM element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/root\n\n    // By default, root is the document\n    cy.root().should('match', 'html');\n    cy.get('.query-ul').within(() => {\n      // In this within, the root is now the ul DOM element\n      cy.root().should('have.class', 'query-ul');\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3483,
              "duration": 166,
              "startedAt": "2023-03-15T05:14:35.538Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Querying",
            "best practices - selecting elements"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/best-practices#Selecting-Elements\n    cy.get('[data-cy=best-practices-selecting-elements]').within(() => {\n      // Worst - too generic, no context\n      cy.get('button').click();\n\n      // Bad. Coupled to styling. Highly subject to change.\n      cy.get('.btn.btn-large').click();\n\n      // Average. Coupled to the `name` attribute which has HTML semantics.\n      cy.get('[name=submission]').click();\n\n      // Better. But still coupled to styling or JS event listeners.\n      cy.get('#main').click();\n\n      // Slightly better. Uses an ID but also ensures the element\n      // has an ARIA role attribute\n      cy.get('#main[role=button]').click();\n\n      // Much better. But still coupled to text content that may change.\n      cy.contains('Submit').click();\n\n      // Best. Insulated from all changes.\n      cy.get('[data-cy=submit]').click();\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3651,
              "duration": 734,
              "startedAt": "2023-03-15T05:14:35.706Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\querying.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "querying.cy.js",
        "fileName": "querying",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/querying.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/querying.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/querying.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 7,
        "passes": 7,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 4829,
        "startedAt": "2023-03-15T05:14:39.156Z",
        "endedAt": "2023-03-15T05:14:43.985Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 7,
        "passes": 7,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:14:39.160Z",
        "end": "2023-03-15T05:14:43.989Z",
        "duration": 4829
      },
      "hooks": [],
      "tests": [
        {
          "title": [
            "Spies, Stubs, and Clock",
            "cy.spy() - wrap a method in a spy"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/spy\n    cy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\n    const obj = {\n      foo() {}\n    };\n    const spy = cy.spy(obj, 'foo').as('anyArgs');\n    obj.foo();\n    expect(spy).to.be.called;\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2227,
              "duration": 372,
              "startedAt": "2023-03-15T05:14:40.299Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Spies, Stubs, and Clock",
            "cy.spy() retries until assertions pass"
          ],
          "state": "passed",
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\n    const obj = {\n      /**\n       * Prints the argument passed\n       * @param x {any}\n      */\n      foo(x) {\n        console.log('obj.foo called with', x);\n      }\n    };\n    cy.spy(obj, 'foo').as('foo');\n    setTimeout(() => {\n      obj.foo('first');\n    }, 500);\n    setTimeout(() => {\n      obj.foo('second');\n    }, 2500);\n    cy.get('@foo').should('have.been.calledTwice');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2601,
              "duration": 2539,
              "startedAt": "2023-03-15T05:14:40.673Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Spies, Stubs, and Clock",
            "cy.stub() - create a stub and/or replace a function with stub"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/stub\n    cy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\n    const obj = {\n      /**\n       * prints both arguments to the console\n       * @param a {string}\n       * @param b {string}\n      */\n      foo(a, b) {\n        console.log('a', a, 'b', b);\n      }\n    };\n    const stub = cy.stub(obj, 'foo').as('foo');\n    obj.foo('foo', 'bar');\n    expect(stub).to.be.called;\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 5142,
              "duration": 147,
              "startedAt": "2023-03-15T05:14:43.214Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Spies, Stubs, and Clock",
            "cy.clock() - control time in the browser"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/clock\n\n    // create the date in UTC so its always the same\n    // no matter what local timezone the browser is running in\n    const now = new Date(Date.UTC(2017, 2, 14)).getTime();\n    cy.clock(now);\n    cy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\n    cy.get('#clock-div').click().should('have.text', '1489449600');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 5290,
              "duration": 228,
              "startedAt": "2023-03-15T05:14:43.362Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Spies, Stubs, and Clock",
            "cy.tick() - move time in the browser"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/tick\n\n    // create the date in UTC so its always the same\n    // no matter what local timezone the browser is running in\n    const now = new Date(Date.UTC(2017, 2, 14)).getTime();\n    cy.clock(now);\n    cy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\n    cy.get('#tick-div').click().should('have.text', '1489449600');\n    cy.tick(10000); // 10 seconds passed\n    cy.get('#tick-div').click().should('have.text', '1489449610');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 5519,
              "duration": 323,
              "startedAt": "2023-03-15T05:14:43.591Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Spies, Stubs, and Clock",
            "cy.stub() matches depending on arguments"
          ],
          "state": "passed",
          "body": "() => {\n    // see all possible matchers at\n    // https://sinonjs.org/releases/latest/matchers/\n    const greeter = {\n      /**\n       * Greets a person\n       * @param {string} name\n      */\n      greet(name) {\n        return `Hello, ${name}!`;\n      }\n    };\n    cy.stub(greeter, 'greet').callThrough() // if you want non-matched calls to call the real method\n    .withArgs(Cypress.sinon.match.string).returns('Hi').withArgs(Cypress.sinon.match.number).throws(new Error('Invalid name'));\n    expect(greeter.greet('World')).to.equal('Hi');\n    expect(() => greeter.greet(42)).to.throw('Invalid name');\n    expect(greeter.greet).to.have.been.calledTwice;\n\n    // non-matched calls goes the actual method\n    expect(greeter.greet()).to.equal('Hello, undefined!');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 5843,
              "duration": 30,
              "startedAt": "2023-03-15T05:14:43.915Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Spies, Stubs, and Clock",
            "matches call arguments using Sinon matchers"
          ],
          "state": "passed",
          "body": "() => {\n    // see all possible matchers at\n    // https://sinonjs.org/releases/latest/matchers/\n    const calculator = {\n      /**\n       * returns the sum of two arguments\n       * @param a {number}\n       * @param b {number}\n      */\n      add(a, b) {\n        return a + b;\n      }\n    };\n    const spy = cy.spy(calculator, 'add').as('add');\n    expect(calculator.add(2, 3)).to.equal(5);\n\n    // if we want to assert the exact values used during the call\n    expect(spy).to.be.calledWith(2, 3);\n\n    // let's confirm \"add\" method was called with two numbers\n    expect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match.number);\n\n    // alternatively, provide the value to match\n    expect(spy).to.be.calledWith(Cypress.sinon.match(2), Cypress.sinon.match(3));\n\n    // match any value\n    expect(spy).to.be.calledWith(Cypress.sinon.match.any, 3);\n\n    // match any value from a list\n    expect(spy).to.be.calledWith(Cypress.sinon.match.in([1, 2, 3]), 3);\n\n    /**\n     * Returns true if the given number is even\n     * @param {number} x\n     */\n    const isEven = x => x % 2 === 0;\n\n    // expect the value to pass a custom predicate function\n    // the second argument to \"sinon.match(predicate, message)\" is\n    // shown if the predicate does not pass and assertion fails\n    expect(spy).to.be.calledWith(Cypress.sinon.match(isEven, 'isEven'), 3);\n\n    /**\n     * Returns a function that checks if a given number is larger than the limit\n     * @param {number} limit\n     * @returns {(x: number) => boolean}\n     */\n    const isGreaterThan = limit => x => x > limit;\n\n    /**\n     * Returns a function that checks if a given number is less than the limit\n     * @param {number} limit\n     * @returns {(x: number) => boolean}\n     */\n    const isLessThan = limit => x => x < limit;\n\n    // you can combine several matchers using \"and\", \"or\"\n    expect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(2), '> 2').and(Cypress.sinon.match(isLessThan(4), '< 4')));\n    expect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(200), '> 200').or(Cypress.sinon.match(3)));\n\n    // matchers can be used from BDD assertions\n    cy.get('@add').should('have.been.calledWith', Cypress.sinon.match.number, Cypress.sinon.match(3));\n\n    // you can alias matchers for shorter test code\n    const {\n      match: M\n    } = Cypress.sinon;\n    cy.get('@add').should('have.been.calledWith', M.number, M(3));\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 5874,
              "duration": 38,
              "startedAt": "2023-03-15T05:14:43.946Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\spies_stubs_clocks.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "spies_stubs_clocks.cy.js",
        "fileName": "spies_stubs_clocks",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/spies_stubs_clocks.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/spies_stubs_clocks.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/spies_stubs_clocks.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 5,
        "passes": 5,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 2755,
        "startedAt": "2023-03-15T05:14:46.888Z",
        "endedAt": "2023-03-15T05:14:49.643Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 5,
        "passes": 5,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:14:46.890Z",
        "end": "2023-03-15T05:14:49.647Z",
        "duration": 2757
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/storage');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Local Storage / Session Storage",
            "cy.clearLocalStorage() - clear all data in localStorage for the current origin"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/clearlocalstorage\n    cy.get('.ls-btn').click().should(() => {\n      expect(localStorage.getItem('prop1')).to.eq('red');\n      expect(localStorage.getItem('prop2')).to.eq('blue');\n      expect(localStorage.getItem('prop3')).to.eq('magenta');\n    });\n\n    // clearLocalStorage() yields the localStorage object\n    cy.clearLocalStorage().should(ls => {\n      expect(ls.getItem('prop1')).to.be.null;\n      expect(ls.getItem('prop2')).to.be.null;\n      expect(ls.getItem('prop3')).to.be.null;\n    });\n    cy.get('.ls-btn').click().should(() => {\n      expect(localStorage.getItem('prop1')).to.eq('red');\n      expect(localStorage.getItem('prop2')).to.eq('blue');\n      expect(localStorage.getItem('prop3')).to.eq('magenta');\n    });\n\n    // Clear key matching string in localStorage\n    cy.clearLocalStorage('prop1').should(ls => {\n      expect(ls.getItem('prop1')).to.be.null;\n      expect(ls.getItem('prop2')).to.eq('blue');\n      expect(ls.getItem('prop3')).to.eq('magenta');\n    });\n    cy.get('.ls-btn').click().should(() => {\n      expect(localStorage.getItem('prop1')).to.eq('red');\n      expect(localStorage.getItem('prop2')).to.eq('blue');\n      expect(localStorage.getItem('prop3')).to.eq('magenta');\n    });\n\n    // Clear keys matching regex in localStorage\n    cy.clearLocalStorage(/prop1|2/).should(ls => {\n      expect(ls.getItem('prop1')).to.be.null;\n      expect(ls.getItem('prop2')).to.be.null;\n      expect(ls.getItem('prop3')).to.eq('magenta');\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2164,
              "duration": 667,
              "startedAt": "2023-03-15T05:14:48.006Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Local Storage / Session Storage",
            "cy.getAllLocalStorage() - get all data in localStorage for all origins"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/getalllocalstorage\n    cy.get('.ls-btn').click();\n\n    // getAllLocalStorage() yields a map of origins to localStorage values\n    cy.getAllLocalStorage().should(storageMap => {\n      expect(storageMap).to.deep.equal({\n        // other origins will also be present if localStorage is set on them\n        'https://example.cypress.io': {\n          'prop1': 'red',\n          'prop2': 'blue',\n          'prop3': 'magenta'\n        }\n      });\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2832,
              "duration": 243,
              "startedAt": "2023-03-15T05:14:48.674Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Local Storage / Session Storage",
            "cy.clearAllLocalStorage() - clear all data in localStorage for all origins"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/clearalllocalstorage\n    cy.get('.ls-btn').click();\n\n    // clearAllLocalStorage() yields null\n    cy.clearAllLocalStorage().should(() => {\n      expect(sessionStorage.getItem('prop1')).to.be.null;\n      expect(sessionStorage.getItem('prop2')).to.be.null;\n      expect(sessionStorage.getItem('prop3')).to.be.null;\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3077,
              "duration": 248,
              "startedAt": "2023-03-15T05:14:48.919Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Local Storage / Session Storage",
            "cy.getAllSessionStorage() - get all data in sessionStorage for all origins"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/getallsessionstorage\n    cy.get('.ls-btn').click();\n\n    // getAllSessionStorage() yields a map of origins to sessionStorage values\n    cy.getAllSessionStorage().should(storageMap => {\n      expect(storageMap).to.deep.equal({\n        // other origins will also be present if sessionStorage is set on them\n        'https://example.cypress.io': {\n          'prop4': 'cyan',\n          'prop5': 'yellow',\n          'prop6': 'black'\n        }\n      });\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3326,
              "duration": 232,
              "startedAt": "2023-03-15T05:14:49.168Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Local Storage / Session Storage",
            "cy.clearAllSessionStorage() - clear all data in sessionStorage for all origins"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/clearallsessionstorage\n    cy.get('.ls-btn').click();\n\n    // clearAllSessionStorage() yields null\n    cy.clearAllSessionStorage().should(() => {\n      expect(sessionStorage.getItem('prop4')).to.be.null;\n      expect(sessionStorage.getItem('prop5')).to.be.null;\n      expect(sessionStorage.getItem('prop6')).to.be.null;\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3559,
              "duration": 241,
              "startedAt": "2023-03-15T05:14:49.401Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\storage.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "storage.cy.js",
        "fileName": "storage",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/storage.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/storage.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/storage.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 18,
        "passes": 18,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 4131,
        "startedAt": "2023-03-15T05:14:52.325Z",
        "endedAt": "2023-03-15T05:14:56.456Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 18,
        "passes": 18,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:14:52.328Z",
        "end": "2023-03-15T05:14:56.460Z",
        "duration": 4132
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/traversal');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Traversal",
            ".children() - get child DOM elements"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/children\n    cy.get('.traversal-breadcrumb').children('.active').should('contain', 'Data');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2178,
              "duration": 407,
              "startedAt": "2023-03-15T05:14:53.463Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".closest() - get closest ancestor DOM element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/closest\n    cy.get('.traversal-badge').closest('ul').should('have.class', 'list-group');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2587,
              "duration": 154,
              "startedAt": "2023-03-15T05:14:53.872Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".eq() - get a DOM element at a specific index"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/eq\n    cy.get('.traversal-list>li').eq(1).should('contain', 'siamese');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2743,
              "duration": 150,
              "startedAt": "2023-03-15T05:14:54.028Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".filter() - get DOM elements that match the selector"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/filter\n    cy.get('.traversal-nav>li').filter('.active').should('contain', 'About');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2894,
              "duration": 159,
              "startedAt": "2023-03-15T05:14:54.179Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".find() - get descendant DOM elements of the selector"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/find\n    cy.get('.traversal-pagination').find('li').find('a').should('have.length', 7);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3054,
              "duration": 174,
              "startedAt": "2023-03-15T05:14:54.339Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".first() - get first DOM element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/first\n    cy.get('.traversal-table td').first().should('contain', '1');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3229,
              "duration": 163,
              "startedAt": "2023-03-15T05:14:54.514Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".last() - get last DOM element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/last\n    cy.get('.traversal-buttons .btn').last().should('contain', 'Submit');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3393,
              "duration": 146,
              "startedAt": "2023-03-15T05:14:54.678Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".next() - get next sibling DOM element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/next\n    cy.get('.traversal-ul').contains('apples').next().should('contain', 'oranges');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3540,
              "duration": 166,
              "startedAt": "2023-03-15T05:14:54.825Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".nextAll() - get all next sibling DOM elements"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/nextall\n    cy.get('.traversal-next-all').contains('oranges').nextAll().should('have.length', 3);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3707,
              "duration": 147,
              "startedAt": "2023-03-15T05:14:54.992Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".nextUntil() - get next sibling DOM elements until next el"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/nextuntil\n    cy.get('#veggies').nextUntil('#nuts').should('have.length', 3);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3856,
              "duration": 146,
              "startedAt": "2023-03-15T05:14:55.141Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".not() - remove DOM elements from set of DOM elements"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/not\n    cy.get('.traversal-disabled .btn').not('[disabled]').should('not.contain', 'Disabled');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 4004,
              "duration": 139,
              "startedAt": "2023-03-15T05:14:55.289Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".parent() - get parent DOM element from DOM elements"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/parent\n    cy.get('.traversal-mark').parent().should('contain', 'Morbi leo risus');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 4145,
              "duration": 138,
              "startedAt": "2023-03-15T05:14:55.430Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".parents() - get parent DOM elements from DOM elements"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/parents\n    cy.get('.traversal-cite').parents().should('match', 'blockquote');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 4284,
              "duration": 146,
              "startedAt": "2023-03-15T05:14:55.569Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".parentsUntil() - get parent DOM elements from DOM elements until el"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/parentsuntil\n    cy.get('.clothes-nav').find('.active').parentsUntil('.clothes-nav').should('have.length', 2);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 4431,
              "duration": 144,
              "startedAt": "2023-03-15T05:14:55.716Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".prev() - get previous sibling DOM element"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/prev\n    cy.get('.birds').find('.active').prev().should('contain', 'Lorikeets');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 4577,
              "duration": 153,
              "startedAt": "2023-03-15T05:14:55.862Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".prevAll() - get all previous sibling DOM elements"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/prevall\n    cy.get('.fruits-list').find('.third').prevAll().should('have.length', 2);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 4731,
              "duration": 143,
              "startedAt": "2023-03-15T05:14:56.016Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".prevUntil() - get all previous sibling DOM elements until el"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/prevuntil\n    cy.get('.foods-list').find('#nuts').prevUntil('#veggies').should('have.length', 3);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 4875,
              "duration": 148,
              "startedAt": "2023-03-15T05:14:56.160Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Traversal",
            ".siblings() - get all sibling DOM elements"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/siblings\n    cy.get('.traversal-pills .active').siblings().should('have.length', 2);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 5024,
              "duration": 146,
              "startedAt": "2023-03-15T05:14:56.309Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\traversal.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "traversal.cy.js",
        "fileName": "traversal",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/traversal.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/traversal.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/traversal.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 5,
        "passes": 5,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 4193,
        "startedAt": "2023-03-15T05:14:59.307Z",
        "endedAt": "2023-03-15T05:15:03.500Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 5,
        "passes": 5,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:14:59.309Z",
        "end": "2023-03-15T05:15:03.503Z",
        "duration": 4194
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/utilities');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Utilities",
            "Cypress._ - call a lodash method"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/_\n    cy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n      let ids = Cypress._.chain(response.body).map('id').take(3).value();\n      expect(ids).to.deep.eq([1, 2, 3]);\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2221,
              "duration": 1182,
              "startedAt": "2023-03-15T05:15:00.465Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Utilities",
            "Cypress.$ - call a jQuery method"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/$\n    let $li = Cypress.$('.utility-jquery li:first');\n    cy.wrap($li).should('not.have.class', 'active').click().should('have.class', 'active');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3405,
              "duration": 241,
              "startedAt": "2023-03-15T05:15:01.649Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Utilities",
            "Cypress.Blob - blob utilities and base64 string conversion"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/blob\n    cy.get('.utility-blob').then($div => {\n      // https://github.com/nolanlawson/blob-util#imgSrcToDataURL\n      // get the dataUrl string for the javascript-logo\n      return Cypress.Blob.imgSrcToDataURL('https://example.cypress.io/assets/img/javascript-logo.png', undefined, 'anonymous').then(dataUrl => {\n        // create an <img> element and set its src to the dataUrl\n        let img = Cypress.$('<img />', {\n          src: dataUrl\n        });\n\n        // need to explicitly return cy here since we are initially returning\n        // the Cypress.Blob.imgSrcToDataURL promise to our test\n        // append the image\n        $div.append(img);\n        cy.get('.utility-blob img').click().should('have.attr', 'src', dataUrl);\n      });\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3648,
              "duration": 336,
              "startedAt": "2023-03-15T05:15:01.892Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Utilities",
            "Cypress.minimatch - test out glob patterns against strings"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/minimatch\n    let matching = Cypress.minimatch('/users/1/comments', '/users/*/comments', {\n      matchBase: true\n    });\n    expect(matching, 'matching wildcard').to.be.true;\n    matching = Cypress.minimatch('/users/1/comments/2', '/users/*/comments', {\n      matchBase: true\n    });\n    expect(matching, 'comments').to.be.false;\n\n    // ** matches against all downstream path segments\n    matching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/**', {\n      matchBase: true\n    });\n    expect(matching, 'comments').to.be.true;\n\n    // whereas * matches only the next path segment\n\n    matching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/*', {\n      matchBase: false\n    });\n    expect(matching, 'comments').to.be.false;\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 3985,
              "duration": 137,
              "startedAt": "2023-03-15T05:15:02.229Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Utilities",
            "Cypress.Promise - instantiate a bluebird promise"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/promise\n    let waited = false;\n\n    /**\n     * @return Bluebird<string>\n     */\n    function waitOneSecond() {\n      // return a promise that resolves after 1 second\n      return new Cypress.Promise((resolve, reject) => {\n        setTimeout(() => {\n          // set waited to true\n          waited = true;\n\n          // resolve with 'foo' string\n          resolve('foo');\n        }, 1000);\n      });\n    }\n    cy.then(() => {\n      // return a promise to cy.then() that\n      // is awaited until it resolves\n      return waitOneSecond().then(str => {\n        expect(str).to.eq('foo');\n        expect(waited).to.be.true;\n      });\n    });\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 4124,
              "duration": 1131,
              "startedAt": "2023-03-15T05:15:02.368Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\utilities.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "utilities.cy.js",
        "fileName": "utilities",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/utilities.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/utilities.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/utilities.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 1,
        "passes": 1,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 4190,
        "startedAt": "2023-03-15T05:15:06.269Z",
        "endedAt": "2023-03-15T05:15:10.459Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 1,
        "passes": 1,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:15:06.270Z",
        "end": "2023-03-15T05:15:10.463Z",
        "duration": 4193
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/viewport');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Viewport",
            "cy.viewport() - set the viewport size and dimension"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/viewport\n\n    cy.get('#navbar').should('be.visible');\n    cy.viewport(320, 480);\n\n    // the navbar should have collapse since our screen is smaller\n    cy.get('#navbar').should('not.be.visible');\n    cy.get('.navbar-toggle').should('be.visible').click();\n    cy.get('.nav').find('a').should('be.visible');\n\n    // lets see what our app looks like on a super large screen\n    cy.viewport(2999, 2999);\n\n    // cy.viewport() accepts a set of preset sizes\n    // to easily set the screen to a device's width and height\n\n    // We added a cy.wait() between each viewport change so you can see\n    // the change otherwise it is a little too fast to see :)\n\n    cy.viewport('macbook-15');\n    cy.wait(200);\n    cy.viewport('macbook-13');\n    cy.wait(200);\n    cy.viewport('macbook-11');\n    cy.wait(200);\n    cy.viewport('ipad-2');\n    cy.wait(200);\n    cy.viewport('ipad-mini');\n    cy.wait(200);\n    cy.viewport('iphone-6+');\n    cy.wait(200);\n    cy.viewport('iphone-6');\n    cy.wait(200);\n    cy.viewport('iphone-5');\n    cy.wait(200);\n    cy.viewport('iphone-4');\n    cy.wait(200);\n    cy.viewport('iphone-3');\n    cy.wait(200);\n\n    // cy.viewport() accepts an orientation for all presets\n    // the default orientation is 'portrait'\n    cy.viewport('ipad-2', 'portrait');\n    cy.wait(200);\n    cy.viewport('iphone-4', 'landscape');\n    cy.wait(200);\n\n    // The viewport will be reset back to the default dimensions\n    // in between tests (the  default can be set in cypress.config.{js|ts})\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2181,
              "duration": 3047,
              "startedAt": "2023-03-15T05:15:07.411Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\viewport.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "viewport.cy.js",
        "fileName": "viewport",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/viewport.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/viewport.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/viewport.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 2,
        "passes": 2,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 7073,
        "startedAt": "2023-03-15T05:15:13.193Z",
        "endedAt": "2023-03-15T05:15:20.266Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 2,
        "passes": 2,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:15:13.195Z",
        "end": "2023-03-15T05:15:20.271Z",
        "duration": 7076
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/waiting');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Waiting",
            "cy.wait() - wait for a specific amount of time"
          ],
          "state": "passed",
          "body": "() => {\n    cy.get('.wait-input1').type('Wait 1000ms after typing');\n    cy.wait(1000);\n    cy.get('.wait-input2').type('Wait 1000ms after typing');\n    cy.wait(1000);\n    cy.get('.wait-input3').type('Wait 1000ms after typing');\n    cy.wait(1000);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2338,
              "duration": 4710,
              "startedAt": "2023-03-15T05:15:14.581Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Waiting",
            "cy.wait() - wait for a specific route"
          ],
          "state": "passed",
          "body": "() => {\n    // Listen to GET to comments/1\n    cy.intercept('GET', '**/comments/*').as('getComment');\n\n    // we have code that gets a comment when\n    // the button is clicked in scripts.js\n    cy.get('.network-btn').click();\n\n    // wait for GET comments/1\n    cy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 7058,
              "duration": 964,
              "startedAt": "2023-03-15T05:15:19.301Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\waiting.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "waiting.cy.js",
        "fileName": "waiting",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/waiting.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/waiting.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/waiting.cy.js"
      },
      "shouldUploadVideo": true
    },
    {
      "stats": {
        "suites": 1,
        "tests": 3,
        "passes": 3,
        "pending": 0,
        "skipped": 0,
        "failures": 0,
        "duration": 1769,
        "startedAt": "2023-03-15T05:15:23.359Z",
        "endedAt": "2023-03-15T05:15:25.128Z"
      },
      "reporter": "spec",
      "reporterStats": {
        "suites": 1,
        "tests": 3,
        "passes": 3,
        "pending": 0,
        "failures": 0,
        "start": "2023-03-15T05:15:23.361Z",
        "end": "2023-03-15T05:15:25.133Z",
        "duration": 1772
      },
      "hooks": [
        {
          "hookName": "before each",
          "title": [
            "\"before each\" hook"
          ],
          "body": "() => {\n    cy.visit('https://example.cypress.io/commands/window');\n  }"
        }
      ],
      "tests": [
        {
          "title": [
            "Window",
            "cy.window() - get the global window object"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/window\n    cy.window().should('have.property', 'top');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2130,
              "duration": 370,
              "startedAt": "2023-03-15T05:15:24.478Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Window",
            "cy.document() - get the document object"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/document\n    cy.document().should('have.property', 'charset').and('eq', 'UTF-8');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2502,
              "duration": 146,
              "startedAt": "2023-03-15T05:15:24.850Z",
              "screenshots": []
            }
          ]
        },
        {
          "title": [
            "Window",
            "cy.title() - get the title"
          ],
          "state": "passed",
          "body": "() => {\n    // https://on.cypress.io/title\n    cy.title().should('include', 'Kitchen Sink');\n  }",
          "displayError": null,
          "attempts": [
            {
              "state": "passed",
              "error": null,
              "videoTimestamp": 2650,
              "duration": 128,
              "startedAt": "2023-03-15T05:15:24.998Z",
              "screenshots": []
            }
          ]
        }
      ],
      "error": null,
      "video": "D:\\Cypress Practice\\cypress\\videos\\2-advanced-examples\\window.cy.js.mp4",
      "spec": {
        "fileExtension": ".js",
        "baseName": "window.cy.js",
        "fileName": "window",
        "specFileExtension": ".cy.js",
        "relativeToCommonRoot": "2-advanced-examples/window.cy.js",
        "specType": "integration",
        "name": "cypress/e2e/2-advanced-examples/window.cy.js",
        "relative": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
        "absolute": "D:/Cypress Practice/cypress/e2e/2-advanced-examples/window.cy.js"
      },
      "shouldUploadVideo": true
    }
  ],
  "browserPath": "",
  "browserName": "electron",
  "browserVersion": "106.0.5249.51",
  "osName": "win32",
  "osVersion": "10.0.19044",
  "cypressVersion": "12.7.0",
  "config": {
    "setupNodeEvents": "[Function setupNodeEvents]",
    "projectRoot": "D:\\Cypress Practice",
    "projectName": "Cypress Practice",
    "repoRoot": "D:/Cypress Practice",
    "rawJson": {
      "e2e": {
        "setupNodeEvents": "[Function setupNodeEvents]"
      },
      "setupNodeEvents": "[Function setupNodeEvents]",
      "envFile": {},
      "projectRoot": "D:\\Cypress Practice",
      "projectName": "Cypress Practice",
      "repoRoot": "D:/Cypress Practice"
    },
    "configFile": "cypress.config.js",
    "morgan": false,
    "isTextTerminal": true,
    "socketId": "3pzizl1h6l",
    "report": true,
    "animationDistanceThreshold": 5,
    "arch": "x64",
    "baseUrl": null,
    "blockHosts": null,
    "chromeWebSecurity": true,
    "clientCertificates": [],
    "defaultCommandTimeout": 4000,
    "downloadsFolder": "D:\\Cypress Practice\\cypress\\downloads",
    "env": {},
    "execTimeout": 60000,
    "experimentalFetchPolyfill": false,
    "experimentalInteractiveRunEvents": false,
    "experimentalRunAllSpecs": false,
    "experimentalMemoryManagement": false,
    "experimentalModifyObstructiveThirdPartyCode": false,
    "experimentalSkipDomainInjection": null,
    "experimentalOriginDependencies": false,
    "experimentalSourceRewriting": false,
    "experimentalSingleTabRunMode": false,
    "experimentalStudio": false,
    "experimentalWebKitSupport": false,
    "fileServerFolder": "D:\\Cypress Practice",
    "fixturesFolder": "D:\\Cypress Practice\\cypress\\fixtures",
    "excludeSpecPattern": "*.hot-update.js",
    "includeShadowDom": false,
    "keystrokeDelay": 0,
    "modifyObstructiveCode": true,
    "numTestsKeptInMemory": 0,
    "platform": "win32",
    "pageLoadTimeout": 60000,
    "port": 10577,
    "projectId": null,
    "redirectionLimit": 20,
    "reporter": "spec",
    "reporterOptions": null,
    "requestTimeout": 5000,
    "resolvedNodePath": "C:\\Program Files\\nodejs\\node.exe",
    "resolvedNodeVersion": "18.13.0",
    "responseTimeout": 30000,
    "retries": {
      "runMode": 0,
      "openMode": 0
    },
    "screenshotOnRunFailure": true,
    "screenshotsFolder": "D:\\Cypress Practice\\cypress\\screenshots",
    "slowTestThreshold": 10000,
    "scrollBehavior": "top",
    "supportFile": "D:\\Cypress Practice\\cypress\\support\\e2e.js",
    "supportFolder": "D:\\Cypress Practice\\cypress\\support",
    "taskTimeout": 60000,
    "testIsolation": true,
    "trashAssetsBeforeRuns": true,
    "userAgent": null,
    "video": true,
    "videoCompression": 32,
    "videosFolder": "D:\\Cypress Practice\\cypress\\videos",
    "videoUploadOnPasses": true,
    "viewportHeight": 660,
    "viewportWidth": 1000,
    "waitForAnimations": true,
    "watchForFileChanges": false,
    "specPattern": "cypress/e2e/**/*.cy.{js,jsx,ts,tsx}",
    "additionalIgnorePattern": [],
    "autoOpen": false,
    "browsers": [
      {
        "name": "chrome",
        "family": "chromium",
        "channel": "stable",
        "displayName": "Chrome",
        "version": "111.0.5563.65",
        "path": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
        "minSupportedVersion": 64,
        "majorVersion": "111"
      },
      {
        "name": "edge",
        "family": "chromium",
        "channel": "stable",
        "displayName": "Edge",
        "version": "111.0.1661.41",
        "path": "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe",
        "minSupportedVersion": 79,
        "majorVersion": "111"
      },
      {
        "name": "electron",
        "channel": "stable",
        "family": "chromium",
        "displayName": "Electron",
        "version": "106.0.5249.51",
        "path": "",
        "majorVersion": 106
      }
    ],
    "clientRoute": "/__/",
    "cypressBinaryRoot": "C:\\Users\\ASL\\AppData\\Local\\Cypress\\Cache\\12.7.0\\Cypress\\resources\\app",
    "devServerPublicPathRoute": "/__cypress/src",
    "hosts": null,
    "isInteractive": true,
    "namespace": "__cypress",
    "reporterRoute": "/__cypress/reporter",
    "socketIoCookie": "__socket",
    "socketIoRoute": "/__socket",
    "version": "12.7.0",
    "cypressEnv": "production",
    "resolved": {
      "animationDistanceThreshold": {
        "value": 5,
        "from": "default"
      },
      "arch": {
        "value": "x64",
        "from": "default"
      },
      "baseUrl": {
        "value": null,
        "from": "default"
      },
      "blockHosts": {
        "value": null,
        "from": "default"
      },
      "chromeWebSecurity": {
        "value": true,
        "from": "default"
      },
      "clientCertificates": {
        "value": [],
        "from": "default"
      },
      "defaultCommandTimeout": {
        "value": 4000,
        "from": "default"
      },
      "downloadsFolder": {
        "value": "cypress/downloads",
        "from": "default"
      },
      "env": {},
      "execTimeout": {
        "value": 60000,
        "from": "default"
      },
      "experimentalFetchPolyfill": {
        "value": false,
        "from": "default"
      },
      "experimentalInteractiveRunEvents": {
        "value": false,
        "from": "default"
      },
      "experimentalRunAllSpecs": {
        "value": false,
        "from": "default"
      },
      "experimentalMemoryManagement": {
        "value": false,
        "from": "default"
      },
      "experimentalModifyObstructiveThirdPartyCode": {
        "value": false,
        "from": "default"
      },
      "experimentalSkipDomainInjection": {
        "value": null,
        "from": "default"
      },
      "experimentalOriginDependencies": {
        "value": false,
        "from": "default"
      },
      "experimentalSourceRewriting": {
        "value": false,
        "from": "default"
      },
      "experimentalSingleTabRunMode": {
        "value": false,
        "from": "default"
      },
      "experimentalStudio": {
        "value": false,
        "from": "default"
      },
      "experimentalWebKitSupport": {
        "value": false,
        "from": "default"
      },
      "fileServerFolder": {
        "value": "",
        "from": "default"
      },
      "fixturesFolder": {
        "value": "cypress/fixtures",
        "from": "default"
      },
      "excludeSpecPattern": {
        "value": "*.hot-update.js",
        "from": "default"
      },
      "includeShadowDom": {
        "value": false,
        "from": "default"
      },
      "keystrokeDelay": {
        "value": 0,
        "from": "default"
      },
      "modifyObstructiveCode": {
        "value": true,
        "from": "default"
      },
      "nodeVersion": {
        "from": "default"
      },
      "numTestsKeptInMemory": {
        "value": 0,
        "from": "config"
      },
      "platform": {
        "value": "win32",
        "from": "default"
      },
      "pageLoadTimeout": {
        "value": 60000,
        "from": "default"
      },
      "port": {
        "value": null,
        "from": "default"
      },
      "projectId": {
        "value": null,
        "from": "default"
      },
      "redirectionLimit": {
        "value": 20,
        "from": "default"
      },
      "reporter": {
        "value": "spec",
        "from": "default"
      },
      "reporterOptions": {
        "value": null,
        "from": "default"
      },
      "requestTimeout": {
        "value": 5000,
        "from": "default"
      },
      "resolvedNodePath": {
        "value": null,
        "from": "default"
      },
      "resolvedNodeVersion": {
        "value": null,
        "from": "default"
      },
      "responseTimeout": {
        "value": 30000,
        "from": "default"
      },
      "retries": {
        "value": {
          "runMode": 0,
          "openMode": 0
        },
        "from": "default"
      },
      "screenshotOnRunFailure": {
        "value": true,
        "from": "default"
      },
      "screenshotsFolder": {
        "value": "cypress/screenshots",
        "from": "default"
      },
      "slowTestThreshold": {
        "value": 10000,
        "from": "default"
      },
      "scrollBehavior": {
        "value": "top",
        "from": "default"
      },
      "supportFile": {
        "value": "cypress/support/e2e.{js,jsx,ts,tsx}",
        "from": "default"
      },
      "supportFolder": {
        "value": false,
        "from": "default"
      },
      "taskTimeout": {
        "value": 60000,
        "from": "default"
      },
      "testIsolation": {
        "value": true,
        "from": "default"
      },
      "trashAssetsBeforeRuns": {
        "value": true,
        "from": "default"
      },
      "userAgent": {
        "value": null,
        "from": "default"
      },
      "video": {
        "value": true,
        "from": "default"
      },
      "videoCompression": {
        "value": 32,
        "from": "default"
      },
      "videosFolder": {
        "value": "cypress/videos",
        "from": "default"
      },
      "videoUploadOnPasses": {
        "value": true,
        "from": "default"
      },
      "viewportHeight": {
        "value": 660,
        "from": "default"
      },
      "viewportWidth": {
        "value": 1000,
        "from": "default"
      },
      "waitForAnimations": {
        "value": true,
        "from": "default"
      },
      "watchForFileChanges": {
        "value": false,
        "from": "config"
      },
      "specPattern": {
        "value": "cypress/e2e/**/*.cy.{js,jsx,ts,tsx}",
        "from": "default"
      },
      "browsers": {
        "value": [
          {
            "name": "chrome",
            "family": "chromium",
            "channel": "stable",
            "displayName": "Chrome",
            "version": "111.0.5563.65",
            "path": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
            "minSupportedVersion": 64,
            "majorVersion": "111"
          },
          {
            "name": "edge",
            "family": "chromium",
            "channel": "stable",
            "displayName": "Edge",
            "version": "111.0.1661.41",
            "path": "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe",
            "minSupportedVersion": 79,
            "majorVersion": "111"
          },
          {
            "name": "electron",
            "channel": "stable",
            "family": "chromium",
            "displayName": "Electron",
            "version": "106.0.5249.51",
            "path": "",
            "majorVersion": 106,
            "isHeadless": true,
            "isHeaded": false
          }
        ],
        "from": "runtime"
      },
      "hosts": {
        "value": null,
        "from": "default"
      },
      "isInteractive": {
        "value": true,
        "from": "default"
      }
    },
    "testingType": "e2e",
    "remote": {
      "origin": "http://localhost:10577",
      "strategy": "file",
      "fileServer": "http://localhost:10578",
      "domainName": "localhost",
      "props": null
    },
    "browser": null,
    "specs": [],
    "proxyUrl": "http://localhost:10577",
    "browserUrl": "http://localhost:10577/__/",
    "reporterUrl": "http://localhost:10577/__cypress/reporter",
    "proxyServer": "http://localhost:10577",
    "state": {}
  }
}